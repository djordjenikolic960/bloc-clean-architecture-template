// Mocks generated by Mockito 5.4.4 from annotations
// in bloc_clean_architecture_template/test/unit_tests/presentation/login/bloc/login_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bloc_clean_architecture_template/domain/use_case/auth/log_in_with_email_and_password_use_case.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LogInWithEmailAndPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInWithEmailAndPasswordUseCase extends _i1.Mock
    implements _i2.LogInWithEmailAndPasswordUseCase {
  MockLogInWithEmailAndPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> logIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
